name: CICD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
    types:
      - closed

env:
  REGISTRY_USER: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & push supacart-gym-api
      - name: Build & push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/auth/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/auth:latest
            ${{ secrets.DOCKER_USERNAME }}/auth:${{ github.sha }}
    
      # Build & push supacart-gym-api
      - name: Build & push API image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/user/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/user:latest
            ${{ secrets.DOCKER_USERNAME }}/user:${{ github.sha }}

      # Build & push nginx-proxy
      - name: Build & push Nginx image
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:latest
            ${{ secrets.DOCKER_USERNAME }}/nginx-proxy:${{ github.sha }}
  deploy:
    needs: build
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_DIR="/home/ubuntu/ecommerce-backend"
            cd "$APP_DIR"

            export DOCKER_USER=${{ secrets.DOCKER_USERNAME }}
            export TAG=${{ github.sha }}

            # Temporary container names
            # TEMP_API="supacart-gym-api-temp"
            # TEMP_NGINX="nginx-temp"

            # echo "üîπ Ensure Docker network exists..."
            # docker network create gym-net || true

            echo "üîπ Pull latest images..."
            docker pull $DOCKER_USER/user:$TAG
            docker pull $DOCKER_USER/auth:$TAG
            docker pull $DOCKER_USER/nginx-proxy:$TAG

            # echo "üîπ Remove old temp containers..."
            # for c in $TEMP_API $TEMP_NGINX; do
            #   if [ "$(docker ps -aq -f name=^$c$)" ]; then
            #     docker rm -f $c
            #   fi
            # done

            # echo "üîπ Run temp API..."
            # docker run -d \
            #   --name $TEMP_API \
            #   --network gym-net \
            #   --network-alias supacart-gym-api \
            #   -p 5001:5000 \
            #   --env-file .env \
            #   $DOCKER_USER/supacart-gym-api:$TAG

            # echo "üîπ Run temp Nginx..."
            # docker run -d \
            #   --name $TEMP_NGINX \
            #   --network gym-net \
            #   -p 8081:80 \
            #   -p 8443:443 \
            #   --env-file .env \
            #   $DOCKER_USER/nginx-proxy:$TAG

            # echo "üîπ Health check temp Nginx..."
            # HEALTHY=false
            # for i in $(seq 1 10); do
            #   if curl -fsS http://supagymbackend.duckdns.org:8081 >/dev/null 2>&1; then
            #     HEALTHY=true
            #     break
            #   fi
            #   echo "‚ùå Not healthy yet (try $i/10)..."
            #   sleep 3
            # done                                                                                                                                                                                                                                                                      

            # if [ "$HEALTHY" != true ]; then
            #   echo "üö® Health check failed. Rolling back..."
            #   docker rm -f $TEMP_API $TEMP_NGINX
            #   exit 1
            # fi
            # echo "‚úÖ Temp containers healthy. Switching live..."

            # docker compose down
            docker compose up -d

            # echo "üßπ Cleaning temp..."
            # docker rm -f $TEMP_API $TEMP_NGINX || true
            # docker image prune -af || true

            echo "üéâ Deployment complete!"
